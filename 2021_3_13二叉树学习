package T0313;

class Node{
    String val;
    Node left;
    Node right;

    public Node(String val) {
        this.val = val;
    }
}
public class BinaryTree {
    public static Node build(){
        Node a=new Node("A");
        Node b=new Node("B");
        Node c=new Node("C");
        Node d=new Node("D");
        Node e=new Node("E");
        Node f=new Node("F");
        Node g=new Node("G");
        a.left=b;
        a.right=c;
        b.left=d;
        b.right=e;
        e.left=g;
        c.right=f;
        return a;

    }

    //先序遍历
    public static void preOrder(Node root){
        if (root==null){
            return;
        }
        //先访问根节点
        System.out.print(root.val);
        //递归遍历左子树
        //递归遍历右子数
        preOrder(root.left);
        preOrder(root.right);
    }
    //中序遍历
    public static void inOrder(Node root){
        if (root==null){
            return;
        }
        inOrder(root.left);
        System.out.print(root.val);
        inOrder(root.right);
    }
    //后序遍历
    public static void postOrder(Node root){
        if (root==null){
            return;
        }
        postOrder(root.left);
        postOrder(root.right);
        System.out.print(root.val);
    }
    //二叉树的节点个数
    public static int count=0;
    public static void length(Node root){
        if (root==null){
            return;
        }
        count++;
        length(root.left);
        length(root.right);
    }

    public static int length2(Node root){
        if (root==null){
            return 0;
        }
        //当前树的节点个数=根节点的个数+左子树节点的个数+右子树节点的个数
        return 1+length2(root.left)+length2(root.right);

    }
    //二叉树的叶子节点的个数
    public static int leafsize=0;
    public static void getleafsize(Node root){
        if (root==null){
            return;
        }
        if (root.left==null&&root.right==null){
            leafsize++;
        }
        getleafsize(root.left);
        getleafsize(root.right);
    }
    //获取叶子节点的个数
    public static int getleafsize2(Node root){
        if (root==null){
            return 0;
        }
        if (root.left==null&&root.right==null){
            return 1;
        }
        return getleafsize2(root.left)+getleafsize2(root.right);
    }
    //获取某层的节点个数
    public static int getkLevelSize(Node root,int k){
        if (root==null||k<1){
            return 0;
        }
        if (k==1){
            return 1;
        }
        return getkLevelSize(root.left,k-1)+getkLevelSize(root.right,k-1);
    }
    //获取二叉树的最大高度
    public static int getHeight(Node root){
        if (root==null){
            return 0;
        }
        int leftHeight=getHeight(root.left);
        int rightHeight=getHeight(root.right);
        return 1+(leftHeight>rightHeight ? leftHeight : rightHeight);
    }
    //查找节点
    public static Node find(Node root,String tofind){
        if (root==null){
            return null;
        }
        if (root.val.equals(tofind)){
            return root;
        }
        Node result=find(root.left,tofind);
        if (result!=null){
            return result;
        }
        return find(root.right,tofind);

    }


    public static void main(String[] args) {
        Node t1=build();
        preOrder(t1);
        System.out.println("先序遍历");
        inOrder(t1);
        System.out.println("中序遍历");
        postOrder(t1);
        System.out.println("后序遍历");
        length(t1);
        System.out.print("二叉树的节点个数：");
        System.out.println(count);
        System.out.println(length2(t1));
        System.out.println("二叉树的叶子节点个数：");
        getleafsize(t1);
        System.out.println(leafsize);
        System.out.println(getleafsize2(t1));
        System.out.println("二叉树第3层的节点个数："+getkLevelSize(t1,3));
        System.out.println("二叉树的高度"+getHeight(t1));
        System.out.println("查找存储D的节点");
        Node xx=find(t1,"D");
        System.out.println(xx.val);
    }
}

package T0313;

import java.util.ArrayList;
import java.util.List;

class TreeNode{
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int val) {
        this.val = val;
    }
}
public class day_03_13 {
    public static void main(String[] args) {

    }
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<>();
        if (root==null){
            return result;
        }
        //先访问根节点
        result.add(root.val);
        //递归处理左子树
        result.addAll(preorderTraversal(root.left));
        //递归处理右子树
        result.addAll(preorderTraversal(root.right));
        return result;

    }

    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<>();
        if (root==null){
            return result;
        }
        result.addAll(inorderTraversal(root.left));
        result.add(root.val);
        result.addAll(inorderTraversal(root.right));
        return result;
    }

    public boolean isSameTree(TreeNode p, TreeNode q) {
        if (p==null&&q==null){
            return true;
        }
        if((p==null&&q!=null)||(p!=null&&q==null)){
            return false;
        }

        if (p.val!=q.val){
            return false;
        }

        return  isSameTree(p.left,q.left)&&isSameTree(p.right,q.right);
    }

    public boolean isSubtree(TreeNode s, TreeNode t) {
        if (s==null){
            return false;
        }
        boolean ret=isSameTree(s,t);
        if (ret){
            return ret;
        }
        return isSubtree(s.left,t)||isSubtree(s.right,t);

    }

    public int maxDepth(TreeNode root) {
        if (root==null){
            return 0;
        }
        int leftHeight=maxDepth(root.left);
        int rightHeight=maxDepth(root.right);
        return 1+(leftHeight>rightHeight ? leftHeight : rightHeight);
    }
}
